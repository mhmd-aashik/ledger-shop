generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  emailVerified  DateTime?        // Required for NextAuth compatibility
  password       String?
  firstName      String?
  lastName       String?
  imageUrl       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  image          String?
  name           String?
  accounts       Account[]
  addresses      Address[]
  cart           Cart[]
  favorites      Favorite[]
  orders         Order[]
  profile        Profile?
  recentlyViewed RecentlyViewed[]
  reviews        Review[]
  sessions       Session[]
  wishlists      Wishlist[]
  analyticsEvents AnalyticsEvent[]

  @@map("users")
}

model Profile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  phone                String?
  dateOfBirth          DateTime?
  gender               Gender?
  bio                  String?
  newsletterSubscribed Boolean   @default(false)
  marketingEmails      Boolean   @default(false)
  smsNotifications     Boolean   @default(false)
  instagramHandle      String?
  twitterHandle        String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Address {
  id         String      @id @default(cuid())
  userId     String
  type       AddressType @default(SHIPPING)
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String      @default("US")
  phone      String?
  isDefault  Boolean     @default(false)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]     @relation("ShippingAddress")

  @@map("addresses")
}

model Category {
  id              String     @id @default(cuid())
  name            String     @unique
  slug            String     @unique
  description     String?
  image           String?
  parentId        String?
  sortOrder       Int        @default(0)
  isActive        Boolean    @default(true)
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  parent          Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryHierarchy")
  products        Product[]

  @@map("categories")
}

model Product {
  id                String           @id @default(cuid())
  name              String
  slug              String           @unique
  description       String
  shortDescription  String?
  price             Decimal          @db.Decimal(10, 2)
  compareAtPrice    Decimal?         @db.Decimal(10, 2)
  costPrice         Decimal?         @db.Decimal(10, 2)
  sku               String?          @unique
  barcode           String?          @unique
  trackQuantity     Boolean          @default(true)
  quantity          Int              @default(0)
  lowStockThreshold Int              @default(5)
  images            String[]
  video             String?
  thumbnail         String?
  categoryId        String
  tags              String[]
  features          String[]
  materials         String[]
  dimensions        String?
  weight            Decimal?         @db.Decimal(8, 2)
  metaTitle         String?
  metaDescription   String?
  status            ProductStatus    @default(DRAFT)
  isActive          Boolean          @default(true)
  isFeatured        Boolean          @default(false)
  rating            Decimal?         @db.Decimal(3, 2)
  reviewCount       Int              @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  publishedAt       DateTime?
  cart              Cart[]
  favorites         Favorite[]
  orderItems        OrderItem[]
  category          Category         @relation(fields: [categoryId], references: [id])
  recentlyViewed    RecentlyViewed[]
  reviews           Review[]
  wishlistItems     WishlistItem[]

  @@map("products")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  addedAt   DateTime @default(now())
  notes     String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

model Order {
  id                String            @id @default(cuid())
  orderNumber       String            @unique
  userId            String?
  customerEmail     String
  customerName      String
  customerPhone     String?
  status            OrderStatus       @default(PENDING)
  paymentStatus     PaymentStatus     @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  subtotal          Decimal           @db.Decimal(10, 2)
  taxAmount         Decimal           @default(0) @db.Decimal(10, 2)
  shippingAmount    Decimal           @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal           @default(0) @db.Decimal(10, 2)
  totalAmount       Decimal           @db.Decimal(10, 2)
  shippingAddressId String?
  paymentMethod     String?
  paymentReference  String?
  paidAt            DateTime?
  trackingNumber    String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  notes             String?
  internalNotes     String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  items             OrderItem[]
  shippingAddress   Address?          @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user              User?             @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  productId    String
  quantity     Int
  price        Decimal  @db.Decimal(10, 2)
  total        Decimal  @db.Decimal(10, 2)
  productName  String
  productSku   String?
  productImage String?
  createdAt    DateTime @default(now())
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Wishlist {
  id          String         @id @default(cuid())
  userId      String
  name        String         @default("My Wishlist")
  description String?
  isPublic    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  items       WishlistItem[]
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wishlists")
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  quantity   Int      @default(1)
  priority   Priority @default(MEDIUM)
  notes      String?
  addedAt    DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@map("wishlist_items")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int      @db.SmallInt
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  isPublic   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model RecentlyViewed {
  id        String   @id @default(cuid())
  userId    String
  productId String
  viewedAt  DateTime @default(now())
  sessionId String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, sessionId])
  @@map("recently_viewed")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId], name: "userId_productId")
  @@map("cart")
}

model Carousel {
  id          String   @id @default(cuid())
  title       String
  subtitle    String
  description String
  image       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  link        String?
  linkText    String?

  @@map("carousels")
}

model OfferBanner {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("offer_banners")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  event     String
  properties Json
  userId    String?
  sessionId String?
  timestamp DateTime @default(now())
  userAgent String?
  referer   String?
  url       String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analytics_events")
}
